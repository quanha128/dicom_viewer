from browser import document, html, ajax, window

THREE = window.THREE
NRRD = THREE.NRRDLoader

camera = THREE.PerspectiveCamera.new(0.05, 1, 0.005, 10000)
scene = THREE.Scene.new()
# scene.background = THREE.Color.new( 0xff0000 )
renderer = THREE.WebGLRenderer.new()
renderer.setSize(300, 300)
controls = THREE.OrbitControls.new(camera, renderer.domElement)
camera.position.z = -300
controls.update()

material = THREE.MeshBasicMaterial.new({
    'color': 0x404040,
})

# light = THREE.AmbientLight.new(0x404040)
# scene.add(light)

def animate(i):
  # note: three.js includes requestAnimationFrame shim
  window.requestAnimationFrame(animate)
  renderer.render(scene, camera)

def addob(volume):
    # texture = THREE.DataTexture3D.new( volume.data, volume.xLength, volume.yLength, volume.zLength )
    # texture.format = THREE.RedFormat
    # texture.type = THREE.FloatType
    # texture.minFilter = texture.magFilter = THREE.LinearFilter
    # texture.unpackAlignment = 1
    # texture.needsUpdate = True

  # THREE.Mesh
  geometry = THREE.BoxGeometry.new( volume.xLength, volume.yLength, volume.zLength )
  geometry.translate( volume.xLength / 2 - 0.5, volume.yLength / 2 - 0.5, volume.zLength / 2 - 0.5 )

  mesh = THREE.Mesh.new( geometry )
  scene.add( mesh )
  document["slide4"] <= renderer.domElement
  renderer.render( scene, camera )

def percent(xhr):
  document['percentage'].text = '{}'.format(int(xhr.loaded / xhr.total * 100)) + "% loaded\n"

loader = NRRD.new()
loader.load('./static/vtk/output.nrrd',
            addob,
            lambda xhr: print((xhr.loaded / xhr.total * 100), "% loaded"))

# show 3d
# document["slide4"] <= renderer.domElement
# renderer.render(scene, camera)
# # animate(0)
# print('reached here')

def upload_ok(req):
    print(req.text)

def submit(event):
    for f in document["myfile"].files:
        ajax.file_upload("/index", f, method="POST",
        oncomplete=upload_ok)

def req_render(event):
    ajax.post("/render", oncomplete=showimg)

def showimg(req):
  if req.text == 'Finished rendering':
    print("Response received")
    # get documents
    panel1 = document['slider1']
    panel2 = document['slider2']
    panel3 = document['slider3']
    panel1.clear()
    panel2.clear()
    panel3.clear()

    # replace with img
    panel1 <= html.IMG(src='/static/img/axial.png')
    panel2 <= html.IMG(src='/static/img/sagittal.png')
    panel3 <= html.IMG(src='/static/img/coronal.png')

    

# def loadimg(ev):
#   panel1 = document['slider1']
#   panel2 = document['slider2']
#   panel3 = document['slider3']
#   panel1.clear()
#   panel2.clear()
#   panel3.clear()

#   # dcm files
#   files = document['myfile'].files[0]
#   print(window.URL.createObjectURL(files))
#   print(dcm_reader.read(window.URL.createObjectURL(files)))

#   # render img
#   files = document['myfile'].files[0]
#   panel1 <= html.IMG(src=window.URL.createObjectURL(files), width=300, height=300)

document["upload"].bind("click", submit)
document["loadimg"].bind("click", req_render)
# document["myfile"].bind("onchange", loadimg)