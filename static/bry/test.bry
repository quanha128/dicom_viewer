from browser import document, html, ajax, window

THREE = window.THREE
NRRD = THREE.NRRDLoader
# WebGL = window.WebGL

# if WebGL.isWebGL2Available() == False:
# 	document <= WebGL.getWebGL2ErrorMessage()

def init():
  # Scene
  scene = THREE.Scene.new()

  # Renderer
  renderer = THREE.WebGLRenderer.new()
  slide4 = document['slide4']
  renderer.setPixelRatio(window.devicePixelRatio)
  # renderer.setSize(window.innerWidth, window.innerHeight)
  renderer.setSize(slide4.clientWidth, slide4.clientHeight)
  # renderer.setClearColor(0xEEEEEE)
  document["slide4"] <= renderer.domElement

  # Camera
  h = 512
  aspect = window.innerWidth / window.innerHeight
  camera = THREE.OrthographicCamera.new( - h * aspect / 2, h * aspect / 2, h / 2, -h / 2, 0.005 , 1e10)
  camera.position.set(-192, -137, 192)
  camera.up.set(0, 0, 1)
  scene.add(camera)

  def render(self):
    renderer.render(scene, camera)

  # Controls
  controls = THREE.OrbitControls.new(camera, renderer.domElement)
  controls.addEventListener('change', render)
  controls.target.set(64, 64, 128)
  controls.minzoom = 0.5
  controls.maxzoom = 4
  controls.enablePan = False
  controls.update()

  def addob(volume):
    # Texture
    texture = THREE.DataTexture3D.new( volume.data, volume.xLength, volume.yLength, volume.zLength )
    texture.format = THREE.RedFormat
    texture.type = THREE.FloatType
    texture.minFilter = texture.magFilter = THREE.NearestFilter 
    texture.unpackAlignment = 1
    texture.needsUpdate = True

    # Colormap
    cmtextures = {
      'viridis': THREE.TextureLoader.new().load('./static/textures/cm_viridis.png', render),
      'gray': THREE.TextureLoader.new().load('./static/textures/cm_gray.png', render)
    }

    # GUI
    volconfig = { 'clim1': 0, 'clim2': 1, 'renderstyle': 'mip', 'isothreshold': 0.15, 'colormap': 'viridis' }

    # Material
    shader = THREE.VolumeRenderShader1
    uniforms = THREE.UniformsUtils.clone(shader.uniforms)

    uniforms[ 'u_data' ].value = texture
    uniforms[ 'u_size' ].value.set( volume.xLength, volume.yLength, volume.zLength )
    uniforms[ 'u_clim' ].value.set( volconfig['clim1'], volconfig['clim2'] )
    uniforms[ 'u_renderstyle' ].value = 0 if volconfig['renderstyle'] == 'mip' else 1 # 0: MIP, 1: ISO
    # uniforms[ 'u_renderthreshold' ].value = volconfig.isothreshold # For ISO renderstyle
    uniforms[ 'u_cmdata' ].value = cmtextures[ volconfig['colormap'] ]

    material = THREE.ShaderMaterial.new( {
            'uniforms': uniforms,
            'vertexShader': shader.vertexShader,
            'fragmentShader': shader.fragmentShader,
            'side': THREE.BackSide # The volume shader uses the backface as its "reference point"
          } )

    # for key in uniforms:
    #   for inkey in uniforms[key]:
    #     print(inkey, ':', uniforms[key][inkey])
    # global image
    # for i in uniforms['u_data']:
    #   for j in uniforms['u_data'][i]:
    #     if j == 'image':
    #       image = uniforms['u_data'][i][j]
    # for i in image:
    #   print(i, image[i])

    # THREE.Mesh
    geometry = THREE.BoxGeometry.new( volume.xLength, volume.yLength, volume.zLength )
    geometry.translate( volume.xLength / 2 - 0.5, volume.yLength / 2 - 0.5, volume.zLength / 2 - 0.5 )

    # test material
    # material = THREE.MeshBasicMaterial.new({
    #   'color': 0xFF0000,
    #   'opacity': 0.8
    # })

    mesh = THREE.Mesh.new( geometry, material )
    scene.add( mesh )
    renderer.render(scene, camera)
  
  # Load NDDR
  loader = NRRD.new()
  loader.load('./static/nrrd/stent.nrrd',
              addob,
              lambda xhr: print((xhr.loaded / xhr.total * 100), "% loaded"),
              lambda e: print(e))


def percent(xhr):
  document['percentage'].text = '{}'.format(int(xhr.loaded / xhr.total * 100)) + "% loaded\n"

def upload_ok(req):
    print(req.text)

def submit(event):
    for f in document["myfile"].files:
        ajax.file_upload("/index", f, method="POST",
        oncomplete=upload_ok)

def req_render(event):
    ajax.post("/render", oncomplete=showimg)

def showimg(req):
  if req.text == 'Finished rendering':
    print("Response received")
    # get documents
    panel1 = document['slider1']
    panel2 = document['slider2']
    panel3 = document['slider3']
    panel1.clear()
    panel2.clear()
    panel3.clear()

    # replace with img
    panel1 <= html.IMG(src='/static/img/axial.png')
    panel2 <= html.IMG(src='/static/img/sagittal.png')
    panel3 <= html.IMG(src='/static/img/coronal.png')

    # display 3d
    init()

document["upload"].bind("click", submit)
document["loadimg"].bind("click", req_render)