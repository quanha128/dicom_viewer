from browser import document, html, ajax, window

THREE = window.THREE
NRRD = THREE.NRRDLoader
VRS = window.VolumeShader
# WebGL = window.WebGL

def render():
  renderer.render(scene, camera)

# Scene
scene = THREE.Scene.new()

# Renderer
renderer = THREE.WebGLRenderer.new()
renderer.setPixelRatio(window.devicePixelRatio)
renderer.setSize(window.innerWidth, window.innerHeight)
document["slide4"] <= renderer.domElement

# Camera
h = 512
aspect = window.innerWidth / window.innerHeight
camera = THREE.OrthographicCamera( - h * aspect / 2, h * aspect / 2, h / 2, -h / 2, 1 , 1000)
camera.position.set(-64, -64, 128)
camera.up.set(0, 0, 1)
scene.add(camera)

# Controls
controls = THREE.OrbitControls.new(camera, renderer.domElement)
controls.addEventListener('change', render)
controls.target.set(64, 64, 128)
controls.minzoom = 0.5
controls.maxzoom = 4
controls.enablePan = False
controls.update()

# Load NDDR
loader = NRRD.new()
loader.load('./static/vtk/output.nrrd',
            addob,
            lambda xhr: print((xhr.loaded / xhr.total * 100), "% loaded"))

def animate():
  window.requestAnimationFrame(animate)
  controls.update()
  renderer.render(scene, camera)

def addob(volume):
  # Texture
  texture = THREE.DataTexture3D.new( volume.data, volume.xLength, volume.yLength, volume.zLength )
  texture.format = THREE.RedFormat
  texture.type = THREE.FloatType
  texture.minFilter = texture.magFilter = THREE.LinearFilter
  texture.unpackAlignment = 1
  texture.needsUpdate = True

  # Colormap
  cmtextures = {
    'viridis': THREE.TextureLoader().load('textures/cm_viridis.png', render).new(),
    'gray': THREE.TextureLoader().load('textures/cm_gray.png', render).new()
  }

  # GUI
  volconfig = { 'clim1': 0, 'clim2': 1, 'renderstyle': 'iso', 'isothreshold': 0.15, 'colormap': 'viridis' }

  # Material
  shader = VRS.VolumeRenderShaper1
  uniforms = THREE.UniformsUtils.clone(shader.uniforms)

  uniforms[ 'u_data' ].value = texture
  uniforms[ 'u_size' ].value.set( volume.xLength, volume.yLength, volume.zLength )
  uniforms[ 'u_clim' ].value.set( volconfig.clim1, volconfig.clim2 )
  uniforms[ 'u_renderstyle' ].value = 0 if volconfig.renderstyle == 'mip' else 1 # 0: MIP, 1: ISO
  # uniforms[ 'u_renderthreshold' ].value = volconfig.isothreshold # For ISO renderstyle
  uniforms[ 'u_cmdata' ].value = cmtextures[ volconfig.colormap ]

  material = THREE.ShaderMaterial.new( {
					'uniforms': uniforms,
					'vertexShader': shader.vertexShader,
					'fragmentShader': shader.fragmentShader,
					'side': THREE.BackSide # The volume shader uses the backface as its "reference point"
				} )

  # THREE.Mesh
  geometry = THREE.BoxGeometry.new( volume.xLength, volume.yLength, volume.zLength )
  geometry.translate( volume.xLength / 2 - 0.5, volume.yLength / 2 - 0.5, volume.zLength / 2 - 0.5 )

  mesh = THREE.Mesh.new( geometry, material )
  scene.add( mesh )
  render()

  # THREE.Mesh
  geometry = THREE.BoxGeometry.new( volume.xLength, volume.yLength, volume.zLength )
  geometry.translate( volume.xLength / 2 - 0.5, volume.yLength / 2 - 0.5, volume.zLength / 2 - 0.5 )

  mesh = THREE.Mesh.new( geometry, material)
  scene.add( mesh )
  render()

def percent(xhr):
  document['percentage'].text = '{}'.format(int(xhr.loaded / xhr.total * 100)) + "% loaded\n"



def upload_ok(req):
    print(req.text)

def submit(event):
    for f in document["myfile"].files:
        ajax.file_upload("/index", f, method="POST",
        oncomplete=upload_ok)

def req_render(event):
    ajax.post("/render", oncomplete=showimg)

def showimg(req):
  if req.text == 'Finished rendering':
    print("Response received")
    # get documents
    panel1 = document['slider1']
    panel2 = document['slider2']
    panel3 = document['slider3']
    panel1.clear()
    panel2.clear()
    panel3.clear()

    # replace with img
    panel1 <= html.IMG(src='/static/img/axial.png')
    panel2 <= html.IMG(src='/static/img/sagittal.png')
    panel3 <= html.IMG(src='/static/img/coronal.png')

    

# def loadimg(ev):
#   panel1 = document['slider1']
#   panel2 = document['slider2']
#   panel3 = document['slider3']
#   panel1.clear()
#   panel2.clear()
#   panel3.clear()

#   # dcm files
#   files = document['myfile'].files[0]
#   print(window.URL.createObjectURL(files))
#   print(dcm_reader.read(window.URL.createObjectURL(files)))

#   # render img
#   files = document['myfile'].files[0]
#   panel1 <= html.IMG(src=window.URL.createObjectURL(files), width=300, height=300)

document["upload"].bind("click", submit)
document["loadimg"].bind("click", req_render)
# document["myfile"].bind("onchange", loadimg)